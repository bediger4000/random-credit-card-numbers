#!/usr/bin/env python2
# Use list comprehensions and generator expressions to
# make generating a random credit card number as
# incomprehensible as possible.

import random
import sys

def random_cc_number(prefix=None, length=16):
	''' Return a random credit card number that passes luhn checksum '''
	digits = []
	if prefix:
		digits = [int(x) for x in list(prefix)]
	for i in range(0, length - 1 - len(digits)):
		digits.append(random.choice((0,1,2,3,4,5,6,7,8,9)))
	# or:
	#digits += [random.choice((0,1,2,3,4,5,6,7,8,9)) for _ in range(0, length - 1 - len(digits))]
	digits.append(calculate_luhn_checkdigit(digits))
	return ''.join([str(x) for x in digits])

def calculate_luhn_checkdigit(digits):
	''' Calculate luhn checksum digit for array of input digits.
		The array of input digits should not have a checkdigit suffix.
		Weight of a digit n: (((2-(p&1))*n)%10) + ((2-(p&1))*n)/10
		"/" operator: truncating integer division.
		p = 0 for odd position digits, p = 1 for even position digits
		Checkdigit + sum of the weights of the digits in the whole number
		should equal a multiple of 10
	'''
	return (10 - (sum( ((((2-(p&1))*d)%10)+((2-(p&1))*d)/10) for p, d in enumerate(digits[::-1])) % 10)) % 10

def calculate_luhn_checksum(digits):
	''' Calculate the luhn checksum of a whole number.
		Returns 0 for a good checksum, some other value otherwise
	'''
	return (sum( ((((2-(p&1))*int(d))%10)+((2-(p&1))*int(d))/10) for p, d in enumerate((digits[:-1])[::-1])) + int(digits[-1:])) % 10

if __name__ == '__main__':
	''' At least one, possibly two, command line args: prefix of card number,
		followed by desired length of card number. '''
	l=16
	try: l = int(sys.argv[2])
	except: pass
	cardno = random_cc_number(prefix=sys.argv[1], length=l)
	print cardno
	if 0 != calculate_luhn_checksum(cardno):
		print cardno, "did not pass checksum"
